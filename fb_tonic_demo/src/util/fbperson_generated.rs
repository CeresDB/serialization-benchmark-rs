// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod fbdemo {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum FBPetOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FBPet<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FBPet<'a> {
  type Inner = FBPet<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FBPet<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FBPet { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FBPetArgs<'args>
  ) -> flatbuffers::WIPOffset<FBPet<'bldr>> {
    let mut builder = FBPetBuilder::new(_fbb);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FBPet::VT_NAME, None)}
  }
}

impl flatbuffers::Verifiable for FBPet<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .finish();
    Ok(())
  }
}
pub struct FBPetArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for FBPetArgs<'a> {
  #[inline]
  fn default() -> Self {
    FBPetArgs {
      name: None,
    }
  }
}

pub struct FBPetBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FBPetBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FBPet::VT_NAME, name);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FBPetBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FBPetBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FBPet<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FBPet<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FBPet");
      ds.field("name", &self.name());
      ds.finish()
  }
}
pub enum FBPersonOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FBPerson<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FBPerson<'a> {
  type Inner = FBPerson<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FBPerson<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_AGE: flatbuffers::VOffsetT = 6;
  pub const VT_PETS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FBPerson { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FBPersonArgs<'args>
  ) -> flatbuffers::WIPOffset<FBPerson<'bldr>> {
    let mut builder = FBPersonBuilder::new(_fbb);
    if let Some(x) = args.pets { builder.add_pets(x); }
    builder.add_age(args.age);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FBPerson::VT_NAME, None)}
  }
  #[inline]
  pub fn age(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FBPerson::VT_AGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn pets(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FBPet<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FBPet>>>>(FBPerson::VT_PETS, None)}
  }
}

impl flatbuffers::Verifiable for FBPerson<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<i32>("age", Self::VT_AGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<FBPet>>>>("pets", Self::VT_PETS, false)?
     .finish();
    Ok(())
  }
}
pub struct FBPersonArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub age: i32,
    pub pets: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FBPet<'a>>>>>,
}
impl<'a> Default for FBPersonArgs<'a> {
  #[inline]
  fn default() -> Self {
    FBPersonArgs {
      name: None,
      age: 0,
      pets: None,
    }
  }
}

pub struct FBPersonBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FBPersonBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FBPerson::VT_NAME, name);
  }
  #[inline]
  pub fn add_age(&mut self, age: i32) {
    self.fbb_.push_slot::<i32>(FBPerson::VT_AGE, age, 0);
  }
  #[inline]
  pub fn add_pets(&mut self, pets: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<FBPet<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FBPerson::VT_PETS, pets);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FBPersonBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FBPersonBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FBPerson<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FBPerson<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FBPerson");
      ds.field("name", &self.name());
      ds.field("age", &self.age());
      ds.field("pets", &self.pets());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `FBPerson`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_fbperson_unchecked`.
pub fn root_as_fbperson(buf: &[u8]) -> Result<FBPerson, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<FBPerson>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `FBPerson` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_fbperson_unchecked`.
pub fn size_prefixed_root_as_fbperson(buf: &[u8]) -> Result<FBPerson, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<FBPerson>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `FBPerson` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_fbperson_unchecked`.
pub fn root_as_fbperson_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FBPerson<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<FBPerson<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `FBPerson` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_fbperson_unchecked`.
pub fn size_prefixed_root_as_fbperson_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FBPerson<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<FBPerson<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a FBPerson and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `FBPerson`.
pub unsafe fn root_as_fbperson_unchecked(buf: &[u8]) -> FBPerson {
  flatbuffers::root_unchecked::<FBPerson>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed FBPerson and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `FBPerson`.
pub unsafe fn size_prefixed_root_as_fbperson_unchecked(buf: &[u8]) -> FBPerson {
  flatbuffers::size_prefixed_root_unchecked::<FBPerson>(buf)
}
#[inline]
pub fn finish_fbperson_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<FBPerson<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_fbperson_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<FBPerson<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod FBDemo

